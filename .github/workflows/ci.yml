name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - new-dalek

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings


jobs:
  stable_build_and_test:
    name: Stable build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # TODO: Windows native msvc target broken
          - os: windows-latest
            target: [x86_64-pc-windows-gnu]
          - os: ubuntu-latest
            target: [x86_64-unknown-linux-gnu]
          - os: macos-latest
            target: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - name: Install ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - run: cargo hack check --release --target ${{ matrix.target }} --each-feature --exclude-features asm
    - run: cargo hack check --release --target ${{ matrix.target }} --all-features --bins --exclude-features asm

  nightly_build_and_test:
    name: Nightly build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: [x86_64-pc-windows-gnu]
          - os: ubuntu-latest
            target: [x86_64-unknown-linux-gnu]
          - os: macos-latest
            target: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - name: Install ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        targets: ${{ matrix.target }}

    - run: cargo hack check --release --each-feature
    - run: cargo hack check --release --all-features

  bench:
    name: Benches compile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    - name: Build default (host native) bench
      run: cargo build --benches

#  build_and_test_windows:
#    name: Build and test (Windows)
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [windows-latest]
#        rust: [nightly, beta, stable]
#        target:
#          - x86_64-pc-windows-gnu
#          # FIXME
#          # -  x86_64-pc-windows-msvc
#
#    steps:
#    - name: Checkout
#      uses: actions/checkout@master
#      with:
#        submodules: recursive
#
#    - name: Install ${{ matrix.rust }}
#      uses: dtolnay/rust-toolchain@master
#      with:
#        toolchain: ${{ matrix.rust }}
#        targets: ${{ matrix.target }}
#
#    - uses: msys2/setup-msys2@v2
#    - name: check
#      uses: actions-rs/cargo@v1
#      with:
#        command: check
#        args: --all --bins --tests --target ${{ matrix.target }}
#
#    - name: check nightly
#      uses: actions-rs/cargo@v1
#      if: matrix.rust == 'nightly'
#      with:
#        command:  check
#        args: --features nightly --all --bins --examples --tests --target ${{ matrix.target }}
#
#    - name: check wasm
#      uses: actions-rs/cargo@v1
#      with:
#        command:  check
#        override: true
#        args: --features wasm --all --bins --target wasm32-unknown-unknown
#
#    - name: check bench
#      uses: actions-rs/cargo@v1
#      if: matrix.rust == 'nightly'
#      with:
#        command:  check
#        target: ${{ matrix.target }}
#        args: --benches
#
#    - name: check asm
#      uses: actions-rs/cargo@v1
#      if: matrix.rust == 'nightly' && matrix.target == 'x86_64-pc-windows-gnu'
#      with:
#        command:  check
#        args: --features asm  --target ${{ matrix.target }}
#        
#    - name: tests
#      uses: actions-rs/cargo@v1
#      with:
#        command: test
#        args: --all  --target ${{ matrix.target }}
#
#    - name: nightly
#      uses: actions-rs/cargo@v1
#      if: matrix.rust == 'nightly'
#      with:
#        command: test
#        args: --all  --features nightly --target ${{ matrix.target }}
#
#    # FIXME
#    # - name: asm
#    #   uses: actions-rs/cargo@v1
#    #   if: matrix.rust == 'nightly' && matrix.target == 'x86_64-pc-windows-gnu'
#    #   with:
#    #     command: test
#    #     args: --all  --features asm --target ${{ matrix.target }}
#
#    - name: tests ignored
#      uses: actions-rs/cargo@v1
#      with:
#        command: test
#        args: --all  --target ${{ matrix.target }} --release -- --ignored
#
#    - name: nightly ignored
#      uses: actions-rs/cargo@v1
#      if: matrix.rust == 'nightly'
#      with:
#        command: test
#        args: --all  --features nightly --target ${{ matrix.target }} --release -- --ignored
#
#    # FIXME
#    # - name: asm ignored
#    #   uses: actions-rs/cargo@v1
#    #   if: matrix.rust == 'nightly' && matrix.target == 'x86_64-pc-windows-gnu'
#    #   with:
#    #     command: test
#    #     args: --all  --features asm --target ${{ matrix.target }} --release -- --ignored


  cross:
    name: Cross compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - i686-unknown-linux-gnu
          - powerpc-unknown-linux-gnu
          # FIXME
          # - powerpc64-unknown-linux-gnu
          - mips-unknown-linux-gnu
          - arm-linux-androideabi

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    - uses: RustCrypto/actions/cross-install@master

    - name: check
      run: cross check --all --target ${{ matrix.target }}

    - name: test
      run: cross test --all --target ${{ matrix.target }}

  check_wasm:
    name: Check wasm targets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [nightly, beta, stable]

    steps:
    - uses: actions/checkout@master

    - name: Install ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: wasm32-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}

    - name: check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --target wasm32-unknown-unknown --features wasm

  clippy:
    name: Check that clippy is happy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy
    - run: cargo clippy --target x86_64-unknown-linux-gnu

  rustfmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt --all -- --check

  doc:
    name: Check docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - run: cargo doc --all-features
