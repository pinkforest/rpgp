name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - new-dalek

env:
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings


jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [nightly,stable,beta]
        include:
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            exclude: wasm
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            exclude: wasm
          - target: x86_64-apple-darwin
            os: macos-latest
            exclude: wasm
          - target: aarch64-apple-darwin
            os: macos-latest
            exclude: asm,wasm
          - target: wasm32-unknown-unknown
            os: linux-latest
            exclude: asm
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    - uses: taiki-e/install-action@cargo-hack
    ############################################
    # Non-nightly
    - name: Each feature (non-nightly)
      if: ${{ contains(matrix.rust, 'nightly') == false }}
      run: cargo hack check --release --target ${{ matrix.target }} --each-feature --exclude-features nightly,asm,${{ matrix.exclude }}
    - name: All features (non-nightly)
      if: ${{ contains(matrix.rust, 'nightly') == false }}
      run: cargo hack check --release --target ${{ matrix.target }} --all-features --exclude-features nightly,asm,${{ matrix.exclude }}
    ############################################
    # Nightly
    - name: Each feature (nightly)
      if: ${{ contains(matrix.rust, 'nightly') == false }}
      run: cargo hack check --release --target ${{ matrix.target }} --each-feature --exclude-features ${{ matrix.exclude }}
    - name: All features (nightly)
      if: ${{ contains(matrix.rust, 'nightly') == false }}
      run: cargo hack check --release --target ${{ matrix.target }} --all-features --exclude-features ${{ matrix.exclude }}

  bench:
    name: Benches compile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
    - name: Build default (host native) bench
      run: cargo build --benches

  cross:
    name: Cross compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - i686-unknown-linux-gnu
          - powerpc-unknown-linux-gnu
          # FIXME
          # - powerpc64-unknown-linux-gnu
          - mips-unknown-linux-gnu
          - arm-linux-androideabi

    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        submodules: recursive

    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    - uses: RustCrypto/actions/cross-install@master

    - name: check
      run: cross check --all --target ${{ matrix.target }}

    - name: test
      run: cross test --all --target ${{ matrix.target }}

#  check_wasm:
#    name: Check wasm targets
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        rust: [nightly, beta, stable]
#
#    steps:
#    - uses: actions/checkout@master
#
#    - name: Install ${{ matrix.rust }}
#      uses: dtolnay/rust-toolchain@master
#      with:
#        toolchain: ${{ matrix.rust }}
#        targets: wasm32-unknown-unknown
#
#    - name: Cache cargo registry
#      uses: actions/cache@v2
#      with:
#        path: ~/.cargo/registry
#        key: wasm32-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
#
#    - name: check
#      uses: actions-rs/cargo@v1
#      with:
#        command: check
#        args: --target wasm32-unknown-unknown --features wasm

  clippy:
    name: Check that clippy is happy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy
    - run: cargo clippy --target x86_64-unknown-linux-gnu

  rustfmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - run: cargo fmt --all -- --check

  doc:
    name: Check docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - run: cargo doc --all-features
